import Debug "mo:base/Debug";
import Nat "mo:base/Nat";
import Array "mo:base/Array";
import Order "mo:base/Order";
import Int "mo:base/Int";


type Order = Order.Order;
  // 定义一个函数
func sortBy<X>(xs : [X], f : (X, X) -> Order) : [X] {
    let n = xs.size();
    //如果数组内元素小于2，返回数组
    if (n < 2) {
      return xs;
    } else {
    //将数组从不可变转为可变数组
      let result = Array.thaw<X>(xs);
      //将可变数组，索引0左边，索引n-1最右边代入函数sortByHelper
      sortByHelper<X>(result, 0, n - 1, f);
      //将可变数组转为不可变数组
      return Array.freeze<X>(result);
    };
  };

func sortByHelper<X> (
    xs : [var X],
    l : Int,
    r : Int,
    f : (X, X) -> Order,
  ) {
    if (l < r) {
        //让i=左边，j=右边
      var i = l;
      var j = r;
      var swap  = xs[0];
      //返回数字的绝对值，取数组的中间值作为基准值
      let pivot = xs[Int.abs(l + r) / 2];
      while (i <= j) {
        //检查左边是否比基准值小，是就跳过，即找出左边比基准值大的
        while (Order.isLess(f(xs[Int.abs(i)], pivot))) {
          i += 1;
        };
        //检查右边是否比基准值大，是就跳过，即找出右边比基准值小的
        while (Order.isGreater(f(xs[Int.abs(j)], pivot))) {
          j -= 1;
        };
        //交换，将找到的小于基准值的数移到左边，大的去右边
        if (i <= j) {
          swap := xs[Int.abs(i)];
          xs[Int.abs(i)] := xs[Int.abs(j)];
          xs[Int.abs(j)] := swap;
          i += 1;
          j -= 1;
        };
      };
      if (l < j) {
        sortByHelper<X>(xs, l, j, f);
      };
      if (i < r) {
        sortByHelper<X>(xs, i, r, f);
      };
    };
  };

func sort(xs : [Int]) : [Int] {
    return sortBy(xs, Int.compare);
    };

//Debug.print(debug_show(sort([2,4,22,11,3])));
